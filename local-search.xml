<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Github无法通过ssh上传代码</title>
    <link href="/2024/10/17/github-ssh/"/>
    <url>/2024/10/17/github-ssh/</url>
    
    <content type="html"><![CDATA[<h1id="解决github无法通过ssh上传代码">解决：Github无法通过ssh上传代码</h1><ul><li>问题描述</li></ul><blockquote><p>Github的安全协议在2020年后不允许用户使用token的情况下直接上传代码，需要使用ssh的方式上传代码</p><p>使用ssh上传代码遇到报错</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Connection closed by 20.205.243.166 port 22<br></code></pre></td></tr></table></figure><h2 id="解决方案">解决方案</h2><p>将github的ssh连接端口改为443</p><p>编辑ssh的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ~/.ssh/config<br></code></pre></td></tr></table></figure><p>在配置文件中添加如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">Host github.com<br>     Hostname ssh.github.com<br>     Port 443<br></code></pre></td></tr></table></figure><ul><li>测试是否能正常连接</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>终端返回</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ ssh -T git@github.com<br>Hi xxx! You<span class="hljs-string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></code></pre></td></tr></table></figure><p>至此配置完成，可以正常连接到github</p>]]></content>
    
    
    <categories>
      
      <category>NETWORK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PROXY</tag>
      
      <tag>SSH</tag>
      
      <tag>DEPLOY</tag>
      
      <tag>NETWORK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Power Profiles Daemon已安装的情况下，KDE仍然提示未安装</title>
    <link href="/2024/10/17/power-profiles-daemon-not-found-although-installed/"/>
    <url>/2024/10/17/power-profiles-daemon-not-found-although-installed/</url>
    
    <content type="html"><![CDATA[<h1 id="power-profiles-daemon已安装的情况下kde仍然提示未安装">PowerProfiles Daemon已安装的情况下，KDE仍然提示未安装</h1><h2 id="问题表现">问题表现</h2><p>Pacman已安装<code>power-profiles-daemon</code>，但KDE仍然提示未安装</p><h2 id="检查是否安装">检查是否安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacman -Q | grep power-profiles-daemon<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ pacman -Q | grep power-profiles-daemon<br><br>power-profiles-daemon 0.23-1<br></code></pre></td></tr></table></figure><h2 id="尝试">尝试</h2><p>重启桌面环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">killall plasmashell &amp;&amp; kstart5 plasmashell<br></code></pre></td></tr></table></figure><p>发现KDE提示已安装，可以选择电源模式</p><p>导致这个问题的原因是<code>power-profiles-daemon</code>服务晚于KDE启动，导致KDE无法检测到服务的存在。重启桌面环境后，KDE重新检测服务后问题解决</p><h2 id="解决方案">解决方案</h2><p>需要编辑电源管理时重启桌面环境即可</p>]]></content>
    
    
    <categories>
      
      <category>FIX</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LINUX</tag>
      
      <tag>FIX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Archlinux启动电脑后黑屏，无法进入SDDM</title>
    <link href="/2024/10/16/sddm-black-screen/"/>
    <url>/2024/10/16/sddm-black-screen/</url>
    
    <content type="html"><![CDATA[<h1 id="sddm黑屏问题">SDDM黑屏问题</h1><h3id="问题表现sddm在x11下启动后黑屏只有左上角光标闪烁">问题表现：SDDM在X11下启动后黑屏，只有左上角光标闪烁</h3><blockquote><p>环境</p><ul><li>操作系统：Arch Linux</li><li>显卡：NVIDIA GeForce RTX 4060 laptop | AMD Radeon 610M 双显卡</li><li>驱动：NVIDIA 560.35 | xf86-video-amdgpu</li><li>桌面环境：KDE Plasma 6.2.1 on wayland</li></ul></blockquote><h3 id="思路解决方案">思路&amp;解决方案</h3><p>sddm正常启动的前提条件：</p><ol type="1"><li>Xorg服务正常启动</li><li>显卡驱动正常加载</li><li>Dbus服务正常启动</li><li>sddm服务正常启动</li></ol><p>按Ctrl+Alt+F3进入tty3，登录后检查Xorg运行状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">xdpyinfo<br></code></pre></td></tr></table></figure><p>发现输出Unable to open display ""，说明Xorg服务未正常启动</p><p>怀疑是NVIDIA驱动出现问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvidia-smi<br></code></pre></td></tr></table></figure><p>Result:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">Wed Oct 16 14:46:21 2024       <br>+-----------------------------------------------------------------------------------------+<br>| NVIDIA-SMI 560.35.03              Driver Version: 560.35.03      CUDA Version: 12.6     |<br>|-----------------------------------------+------------------------+----------------------+<br>| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |<br>| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |<br>|                                         |                        |               MIG M. |<br>|=========================================+========================+======================|<br>|   0  NVIDIA GeForce RTX 4060 ...    On  |   00000000:01:00.0 Off |                  N/A |<br>| N/A   41C    P3             10W /   80W |      15MiB /   8188MiB |      6%      Default |<br>|                                         |                        |                  N/A |<br>+-----------------------------------------+------------------------+----------------------+<br>                                                                                         <br>+-----------------------------------------------------------------------------------------+<br>| Processes:                                                                              |<br>|  GPU   GI   CI        PID   Type   Process name                              GPU Memory |<br>|        ID   ID                                                               Usage      |<br>|=========================================================================================|<br>|    0   N/A  N/A      1196      G   /usr/lib/Xorg                                   4MiB |<br>+-----------------------------------------------------------------------------------------+<br></code></pre></td></tr></table></figure><p>输出正常，说明驱动正常加载</p><p>怀疑是Xorg配置文件出现问题，尝试删除配置文件重新生成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> /etc/X11/xorg.conf<br><span class="hljs-built_in">sudo</span> nvidia-xconfig<br><span class="hljs-built_in">sudo</span> reboot<br></code></pre></td></tr></table></figure><p>重启后问题依旧，尝试使用Xorg生成而不是NVIDIA生成的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> /etc/X11/xorg.conf<br><span class="hljs-built_in">sudo</span> reboot<br></code></pre></td></tr></table></figure><p>重启后问题成功解决分析：Xorg配置文件在执行<code>sudo pacman -Syu xorg</code>后出现问题，删除后重新生成即可解决NVIDIA生成的配置文件有问题，别用<code>nvidia-xconfig</code>生成 <del>FKUNVIDIA</del></p>]]></content>
    
    
    <categories>
      
      <category>FIX</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LINUX</tag>
      
      <tag>FIX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello Hexos</title>
    <link href="/2024/10/15/hello-hexos/"/>
    <url>/2024/10/15/hello-hexos/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建个人博客">搭建个人博客</h1><p>教程来源： https://xie.infoq.cn/article/ac51ce1f6e9434779c35cbb6c</p>]]></content>
    
    
    <categories>
      
      <category>DEPLOY</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DEPLOY</tag>
      
      <tag>HEXOS</tag>
      
      <tag>DEV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>同步不同服务端间的消息——Chatbridge</title>
    <link href="/2022/11/17/mcdr-chatbridge/"/>
    <url>/2022/11/17/mcdr-chatbridge/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>在安装过程中可能会出现各种报错，如果你遇到了问题，请自行查询相关资料，切忌全程复制粘贴，最好可以理解后再操作</p>          </div><h3 id="前言"><strong>1 前言</strong></h3><p>Chatbridge是MCDR的插件，用于同步不同服务器之间的消息（以下简称CB）。</p><h3 id="cb的配置"><strong>2 CB的配置</strong></h3><p>请确保服务端已安装MCDR。<br />要运行CB，请执行以下命令来安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install pycryptodome<br>pip3 install colorlog<br></code></pre></td></tr></table></figure><p>若出现以下问题，请查阅虚拟环境相关资料</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">❯ pip3 install json<br>error: externally-managed-environment<br><br>× This environment is externally managed<br>╰─&gt; To install Python packages system-wide, try &#x27;pacman -S<br>    python-xyz&#x27;, where xyz is the package you are trying to<br>    install.<br></code></pre></td></tr></table></figure><p>假设有两个服务器，一个为生存服，一个为创造服。<br />此处需要三个screen来分别运行三个服务端，分别是CB服务端、生存服务端、创造服务端。<br />你可以把CB服务端和创造服务端放在一个服务器里来运行，以节省资源。</p><h3 id="cb服务端的配置"><strong>2.1 CB服务端的配置</strong></h3><p>找到ChatBridge.pyz，丢进单独的文件夹内。<br />cd到该目录，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 ChatBridge.pyz server<br></code></pre></td></tr></table></figure><p>运行后会报错并退出，同时该目录下会生成<code>ChatBridge_server.json</code>。修改该文件配置如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;aes_key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ThisIstheSecret&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hostname&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8124</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;clients&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;生存服&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Survival&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;创造服&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Creative&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;QQChannel&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;QQ&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;show_chat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;log_chat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>解释</strong>：</p><ul><li><code>"aes_key": "ThisIstheSecret"</code>：加密密钥，没特殊用途时保持默认。</li><li><code>"hostname": "0.0.0.0"</code>：本地地址，通常无需更改。</li><li><code>"port": 8124</code>：服务端端口号。</li><li><code>"clients"</code>：需要同步消息的服务器配置，包括名称和密码。</li><li><code>"show_chat": true</code>：是否在控制台显示聊天信息。</li><li><code>"log_chat": true</code>：是否记录聊天信息。</li></ul><p>修改完成后重新运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 ChatBridge.pyz server<br></code></pre></td></tr></table></figure><p>正常运行输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">AES Key = ThisIstheSecret<br>Server address = 0.0.0.0:8125<br>- Client <span class="hljs-comment">#1: name = 生存服, password = Survival</span><br>- Client <span class="hljs-comment">#2: name = 创造服, password = Creative</span><br>- Client <span class="hljs-comment">#3: name = QQChannel, password = QQ</span><br></code></pre></td></tr></table></figure><p>把这个进程丢screen里边防止关闭终端时服务终止。至此服务端的配置完成。</p><h3 id="客户端的配置"><strong>2.2 客户端的配置</strong></h3><p>复制一份ChatBridge.pyz丢MCDR的插件目录里。<br />第一次运行服务端后会在 <code>/mcdr安装目录/config/chatbridge/</code>中生成<code>ChatBridge_client.json</code>。<br />修改创造服配置如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;aes_key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ThisIstheSecret&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;创造服&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Creative&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;server_hostname&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;server_port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8124</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>解释</strong>：</p><ul><li><code>"aes_key": "ThisIstheSecret"</code>：与服务端一致的加密密钥。</li><li><code>"name": "创造服"</code>：客户端的服务器名称。</li><li><code>"password": "Creative"</code>：与服务端一致的密码。</li><li><code>"server_hostname": "0.0.0.0"</code>：此处填生存服的IP。如果生存服和创造服在同一台服务器上，填<code>0.0.0.0</code>。</li><li><code>"server_port": 8124</code>：服务端的端口号。</li></ul><p>修改生存服配置如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;aes_key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ThisIstheSecret&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;生存服&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Survival&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;server_hostname&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;server_port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8124</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>解释</strong>：</p><ul><li><code>"aes_key"</code>、<code>"server_port"</code>：同创造服配置。</li></ul><p>如果 <code>"name"</code>参数使用中文，请用<code>UTF-8</code>编码保存，否则会乱码。<br />重启服务端或重载MCDR的config，配置正式完成，现在可以实现创造服与生存服消息互通了。</p><h3 id="qq机器人的配置"><strong>3 QQ机器人的配置</strong></h3><div class="note note-warning">            <p><strong>Go-CQhhtp协议库时代已经过去，想要追求稳定的QQ机器人服务，参见</strong><a href="/"><em>4小节</em></a></p>          </div><p>QQ消息机器人需要两个screen来运行，分别是CBQQ端、go-cqhttp端，实测占用资源极低，可以全部放在一个服务器里。<br />你需要准备以下材料：</p><ul><li>QQ小号</li><li>go-cqhttp文件 <a href="https://github.com/Mrs4s/go-cqhttp/releases"title="Github下载">Github下载</a>，解压后得到没有后缀的程序go-cqhttp。</li></ul><h3 id="配置go-cqhttp服务端">3.1 配置go-cqhttp服务端</h3><p>将go-cqhttp文件丢一个单独的文件夹内，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./go-cqhttp<br></code></pre></td></tr></table></figure><p>出现以下文本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">未找到配置文件，正在为您生成配置文件中！<br>请选择你需要的通信方式:<br>&gt; 0: HTTP通信<br>&gt; 1: 云函数服务<br>&gt; 2: 正向 Websocket 通信<br>&gt; 3: 反向 Websocket 通信<br></code></pre></td></tr></table></figure><p>输入<code>02</code>，开启HTTP通信与正向Websocket通信。程序会自动退出并生成<code>config.yml</code>，编辑如下项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">uin:</span> <span class="hljs-number">123456</span><br><span class="hljs-attr">password:</span> <span class="hljs-string">&#x27;******&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>解释</strong>：</p><ul><li><code>uin: 123456</code>：123456换成你的QQ小号。</li><li><code>password: '******'</code>：******替换为密码，密码****为空时使用扫码登录。</li></ul><p>此处大概率会登录失败，提示密码错误或者网络环境复杂，解决方案如下：</p><h3 id="go-cqhttp密码正确但仍登录失败的解决方案">3.1.1go-cqhttp密码正确但仍登录失败的解决方案</h3><p>下载Windows版本的go-cqhttp，<ahref="https://github.com/Mrs4s/go-cqhttp/releases"title="Github下载">Github下载</a>，放到自己电脑里，并将配置完成的<code>config.yml</code>复制到同目录下。<br />shift+右键点击该文件夹空白区域打开powershell，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./go-cqhttp<br></code></pre></td></tr></table></figure><p>开始登录，但仍提示登录失败，注意到目录下生成<code>device.json</code>文件，打开<code>device.json</code>，把<code>"protocol"</code>项参数从5改成2：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>再次尝试登录，成功后将生成的<code>session.token</code>和<code>device.json</code>丢服务器里覆盖原文件。<br />在服务器上重新运行go-cqhttp：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./go-cqhttp<br></code></pre></td></tr></table></figure><p>此时大概率登录成功，丢screen挂着即可。由于腾讯风控系统更改频率快，此方法在将来可能失效，如若上述步骤正确但仍无法登录，请自行谷歌解决方法。</p><h3 id="配置cbqq端">3.2 配置CBQQ端</h3><p>前往步骤2.1中存放ChatBridge.pyz的目录，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 ChatBridge.pyz cqhttp_bot<br></code></pre></td></tr></table></figure><p>与2.1配置时一样会崩溃并生成<code>ChatBridge_CQHttp.json</code>文件，修改<code>ChatBridge_CQHttp.json</code>如下配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;aes_key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ThisIstheSecret&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;QQChannel&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;QQ&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;server_hostname&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;server_port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8124</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;ws_address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;ws_port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8080</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;access_token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;react_group_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">123456</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>解释</strong>：</p><ul><li><code>"name": "QQChannel"</code>：与CB服务端中<code>name</code>一致。</li><li><code>"server_hostname": "127.0.0.1"</code>：如果CBQQ和CB在同一服务器上运行，此项不动，如不在一个服务器上运行，输入CB服务器的IP地址。</li><li><code>"react_group_id": 123456</code>：QQ群ID，123456换成需要同步消息的QQ群。</li></ul><p>保存后再次运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 ChatBridge.pyz cqhttp_bot<br></code></pre></td></tr></table></figure><p>丢screen里边，此时QQ群能正常收到MC服务器中发送的消息。<br />CB的作者默认需要在MC中使用<code>!!qq &lt;消息&gt;</code>来发送至QQ，在QQ中使用<code>!!mc &lt;消息&gt;</code>来发送至MC。<br />如果想同步全部消息，<ahref="https://github.com/Apricityx/ChatBridge-BroadCastALL/releases/tag/1.3%22By%20Apricityx_%22">请使用这个fork版本</a>。</p><h3 id="补充内容使用更好的qq机器人服务"><strong>4.补充内容：使用更好的QQ机器人服务</strong></h3><div class="note note-info">            <p>如果你的QQ机器人频繁报Code：45或是频繁触发封控掉登陆甚至于被封号，请采用下面的方案若你的服务能正常运行，可以忽略这一小节</p>          </div><p>Go-CQhttp协议库如今已经停止维护，目前最好的解决方案是替换掉go-cqhttp，只要同样可以提供Onebot服务的方案就能完美对接Chatbridge</p><blockquote><p>根据替代方案LiteloaderQQNT的提议，此处不给出具体的部署方案，如有需要请自行研究</p><p>核心思路是用LiteloaderQQNT-LLOnebot替换掉go-cqhttp，3.2中配置不变，替换掉3.1中提供的服务即可</p></blockquote><p><em>相关链接：</em></p><p><ahref="https://github.com/LiteLoaderQQNT/LiteLoaderQQNT">LiteloaderQQNT</a></p><p><a href="https://github.com/LLOneBot/LLOneBot">LLOnebot</a></p><div class="note note-danger">            <p>请不要在 QQ 官方群聊和任何影响力较大的简中互联网平台（包括但不限于:哔哩哔哩，微博，知乎，抖音等）发布和讨论任何与本插件存在相关性的信息</p>          </div><h3 id="总结"><strong>5.总结</strong></h3><p>如果配置正常，将会有以下screen运行：</p><ul><li>MC生存服务端</li><li>MC创造服务端</li><li>CB服务端</li><li>CBqq服务端</li><li>go-cqhttp或是其他提供OnebotAPI的服务端</li></ul><p>如果全部功能都正常运行，那么恭喜你，全部配置已完成。</p>]]></content>
    
    
    <categories>
      
      <category>MINECRAFT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MINECRAFT</tag>
      
      <tag>MCDR</tag>
      
      <tag>CHATBRIDGE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Linux上安装Dragon Well</title>
    <link href="/2022/11/08/install-dragon-well-on-linux/"/>
    <url>/2022/11/08/install-dragon-well-on-linux/</url>
    
    <content type="html"><![CDATA[<h3 id="前言">1 前言</h3><p>在本博文中，Java将被安装在 <code>/opt/java/dragonwell/</code>目录下。如果您希望更改安装目录，请相应调整命令。</p><p>此外，这篇博文主要是为了记录自己的操作 <del>看不懂就算了</del></p><h3 id="dragon-well的下载">2 Dragon Well的下载</h3><p>选择以下两种下载方式的其中一种，推荐使用第二种：</p><h4 id="方法一懒人下载">2.1 方法一：懒人下载</h4><p>首先，创建一个临时目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /temp1<br></code></pre></td></tr></table></figure><p>进入临时目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /temp1<br></code></pre></td></tr></table></figure><p>使用 <code>wget</code> 下载Dragon Well：</p><p><strong>注意：请确认下载链接是否有效。如果无效，请查阅<code>wget</code>命令的用法，寻找可用的下载链接，或采用第二种下载方法。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://dragonwell.oss-cn-shanghai.aliyuncs.com/17.0.4.0.4%2B8/Alibaba_Dragonwell_Standard_17.0.4.0.4%2B8_x64_linux.tar.gz<br></code></pre></td></tr></table></figure><p>下载部分到此结束。</p><h4 id="方法二常规下载">2.2 方法二：常规下载</h4><p>您可以访问以下链接进行下载：</p><ul><li><a href="https://github.com/alibaba/dragonwell17/releases"title="原下载地址">原下载地址</a></li><li><ahref="https://github.com/alibaba/dragonwell17/wiki/Mirrors-for-download-"title="镜像">镜像下载</a></li></ul><p>下载后请将文件上传至服务器的 <code>/temp1</code>目录（可以更改，但后续命令中请相应调整）。</p><h3 id="正式安装">3 正式安装</h3><h4 id="解压">3.1 解压</h4><p>使用以下命令解压下载的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zxvf Alibaba_Dragonwell_Standard_17.0.4.0.4+8_x64_linux.tar.gz -C /opt/java/<br></code></pre></td></tr></table></figure><h4 id="配置全局变量">3.2 配置全局变量</h4><p>使用 <code>vim</code> 编辑用户的 <code>.bashrc</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ~/.bashrc<br></code></pre></td></tr></table></figure><h5 id="编辑-.bashrc">3.2.1 编辑 <code>.bashrc</code></h5><p>在 <code>vim</code> 中，按 <code>i</code>进入编辑模式，然后粘贴以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> JAVA_HOME=/opt/java/dragonwell/dragonwell-17.0.4.0.4+8-GA<br><span class="hljs-built_in">export</span> CLASSPATH=.:<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/lib/dt.jar:<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/lib/tools.jar<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure><p>按 <code>Esc</code> 退出编辑模式，输入 <code>:wq</code>保存并退出。</p><h5 id="刷新环境变量">3.2.2 刷新环境变量</h5><p>使用以下命令刷新环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><p>至此，环境变量的配置已完成。</p><h3 id="验证">4 验证</h3><p>输入以下命令以验证Java是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -version<br></code></pre></td></tr></table></figure><p>如果输出中出现“Dragon Well”的字样，则表示安装成功。</p>]]></content>
    
    
    <categories>
      
      <category>DEPLOY</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DEPLOY</tag>
      
      <tag>JAVA</tag>
      
      <tag>DRAGON WELL</tag>
      
      <tag>LINUX</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
